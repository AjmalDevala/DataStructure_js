Is Valid Binary Search:
----------------------
STEP 1: Define the min and max value the current node can have
STEP 2: If a node's value is not within those bounds, return false
STEP 3: Recursively validate the node's left children, with the max bound set to the node's value
STEP 4: Recursively validate the nodes's right children, with the min bound set to the node's value.

Find Binary Tree Max Depth:
--------------------------
STEP 1: If the node is null, we return 0 as it does not add any depth.
STEP 2: Else we add +1 to our current depth (We traversed one level).
STEP 3: Recursively calculate the depth of node's children and return the maximum sum between node.left and node.right

Find Lowest Common Ancestor Between Two Tree Nodes:
---------------------------------------------------
STEP 1: Verify if p or q is found in the left subtree or the right subtree
STEP 2: Then, verify if the current node is p or q.
STEP 3: If one of p or q is found in the left or right subtree, and one of p or q is the node itself, we have found the LCA
STEP 4: If both p and q are found in the left or right subtree, we have found the LCA.

InOrder Traversal:
-----------------
STEP 1: If the node is null, do nothing - else, recursively call the function on the node's left child.
STEP 2: Then, do some operation on the node after traversing through all the left child. Our current node is guarenteed to be the leftest node.
STEP 3: Finally, call the function on node.right. 

PostOrder Traversal:
-------------------
STEP 1: If the node is null, do nothing - else recursively call the function on the node's left child.
STEP 2: When there are no more left children, call the function on node.right.
STEP 3: Finally do some operation on the node.

PreOrder Traversal:
------------------
STEP 1: If the ndoe is null, do nothing - else do some operation on the node.
STEP 2: Traverse to left child of the node and repeat.
STEP 3: Traverse to right child of the node and repeat.